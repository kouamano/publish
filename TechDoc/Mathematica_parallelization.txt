#Mathematica並列化処理を理解するための基礎知識


##ハードウエア
###CPU(Intel)
- 計算コア
- キャッシュメモリ
- hyperthreading: キャッシュを共有する計算コアのペア。完全なマルチプルインストラクション。
  計算コアは論理CPUコアとして認識可能、各CPUコアがCPUとして見える。
- CPUダイ:CPUの流通単位。マルチコアとは一つのCPUダイに複数のコアを含むもの。
- メインメモリーコントローラー:一つのCPUダイからメモリーコントローラーを通してメインメモリに接続、メインメモリは各コアからは同じ距離にある。
- QPI:CPUダイ(ソケット)間通信パス。
- ソケット:CPUダイとマザーボードの接続。
###NUMA:不均一メモリーアクセス機構
マザーボード上のメモリーはシングルイメージとして構成される。
CPUダイごとにメインメモリーアクセスの距離が異なる。
ユーザーからはSMPと同じように見える。

 numastat
 numactl


##大規模データのメモリーへの読み込み
大規模なデータ(メインメモリをCPUソケット数で割った値以上)を一つのアプリケーションがロードすると、必ずQPI通信もしくはプロセス間通信が発生し処理は遅延する。


##Mathematicaの並列処理
###マルチスレッド
下例、In[2]ではマルチスレッドが施される。
もし、スレッド数が1ソケットあたりのCPUコア数を超えたら、QPI通信が発生し処理は遅延する。

 export OMP_NUM_THREADS=16;math # 標準では、OMP_NUM_THREADSは32
 t=Table[Random[],{4000},{4000}];                                       
 PrincipalComponents[t]; 
 #スレッディングでは1-Control Kernelにつき16スレッド、合計32スレッドを実行可能。

マルチスレッドでは各スレッドがそれぞれのCPUコアに分配されるが、ロードはプロセスを受け持つCPUに集約される。

 top
 numatop

###マルチプロセス
Parallel系関数では、マルチスレッドが抑制され、カーネルがマルチプロセスで実行される。
各プロセスはそれぞれのCPUコアに分配され、プロセス間通信が発生し、処理は遅延する。
 #起動直後にはサブカーネルが準備されていない
 ps ax | grep math 
 Timing[Table[Prime[n], {n, 1, 4000000}];]
 AbsoluteTiming[Table[Prime[n], {n, 1, 4000000}];]
 ps ax | grep math
 #parallel系関数が呼び出された時にサブカーネルが起動する
 Timing[ParallelTable[Prime[n], {n, 1, 4000000}];]
 AbsoluteTiming[ParallelTable[Prime[n], {n, 1, 4000000}];]
 #サブカーネルの合計起動数は8
 #カーネル関数のような入力に対して出力が少なくなるjobの効率は高くなる。
 #Quitには時間がかかる/失敗することがある
 Quit


##プロセススケジューラー
プロセススケジューラーは、いつ、どのプロセスを実行するかをスケジュールする。
システムがマルチコアシステムである場合、いつ、どのプロセスを、どのコアで実行するかをスケジュールする。
###プロセスマイグレーション
マルチコアシステムにおけるプロセスとコアのバインドは、前もってプロセスの終了時期がわからないために、スケジュールのアンバランスをもたらす。
これを解消するために、OSはダイナミックにプロセスをリバインドする。
このことをプロセスマイグレーションと言う。
一般的にプロセスマイグレーションにはコストがかかるため、他のNUMAノードへのリバインドは抑制されている。
さらに、ユーザーの明示的な指示によりプロセスとCPUをバインドし続けることができる。
この場合のマイグレーションはロードバランサーを目的として稼働することに注意。
「プロセスマイグレーション」という言葉は、実際にはより広義に使われる。

###mathkernelとCPUのバインド固定
 top -u kamano
  f j 
 math

 CloseKernels[]
 Needs["SubKernels`LocalKernels`"]
 LaunchKernels[ LocalMachine[ "numactl --physcpubind=0  /usr/local/bin/math -subkernel  -noinit -mathlink"]]
 LaunchKernels[ LocalMachine[ "numactl --physcpubind=1  /usr/local/bin/math -subkernel  -noinit -mathlink"]]

####Mathematicaの並列化の仕組みを推測する
上記のコマンドは重要な示唆を含んでいる。
すなわち、subkernelは外部コマンドによって立ち上げられる = Mathematica内でfork()されない。
したがって、各subkernelは、基本的には親プロセスの定義を引き継いでいない。
このことは、ネットワークを超えた汎用性の高い並列化を実現できる反面、変数の共有において多大なコストを要する。

 strace -o tmp echo -e Needs[\"SubKernels\`LocalKernels\`\"]\;\\n LaunchKernels[ LocalMachine[ \"numactl --physcpubind=0  /usr/local/bin/math -subkernel  -noinit -mathlink\"]] | math

