(**** Linuxを中心としたまとめドキュメント ****)

#OSのバージョン
cat /etc/redhat-release

#SELinux
##log file
/var/log/messages
/var/log/audit
##ps
ps -eZ
##audit2allow
###make allow policy
audit2allow --module=httpd --dmesg
##list service port
semanage port -l | grep http
##allow service port
semanage port -a -t http_port_t -p tcp 8099
##disable service port
semanage port -d -t http_port_t -p tcp 443
##change context
chcon unconfined_u:object_r:httpd_user_content_t:s0 CharacteristicsOfEigen.nb
##make .te file using  audit2allow
audit2allow -a -l -m local
audit2allow -i audit.mail -l -m sendmail
##semodule working dir
/usr/share/selinux/devel
##メッセージの探し方:
まず、ファイル: /var/log/messages を見て、
sealert -l <ID>
でメッセージを見る

#bash
##タブの入力
[Ctrl]v [tab]
##bash if 構文
for file in *; do if [ -d $file ]; then echo 1; else echo 2; fi; done; 
##bash TABとかの入力
Ctrl + v 入力の直次の入力がverbatimになる。
##ループ内の並列処理 -> 改行で処理を分ける必要アリ。
###以下は並列で動く:
for f in *
	do echo $f &
done
###以下は並列で動かない:
for f in *; do echo $f ;& done
##while read
###read の対象ファイル名にバックスラッシュを含む場合の処理(-rオプション)
while read -r fname ...
##history設定
##コマンド実行時刻を記録する
- file: .bashrc
 HISTTIMEFORMAT='%Y-%m-%dT%T%z '

#zsh
##zshでのhistory
history 1
で全履歴。

#SSH
##Xのトンネリングでかな漢字変換を有効にする
ローカル側の /etc/ssh/ssh_configに
SendEnv XMODIFIERS
リモート側の /etc/ssh/sshd_configに
AcceptEnv XMODIFIERS
##port 443を使う
sshd_config:
/===
Port 22
Port 443
===/
SELinux:
/===
[root@n007 etc]# semanage port -a -t ssh_port_t -p tcp 443
/usr/sbin/semanage: ポート tcp/443 はすでに定義されています
[root@n007 etc]# semanage port -d -t http_port_t -p tcp 443
libsemanage.get_users: user xguest not in password file
[root@n007 etc]# semanage port -m -t ssh_port_t -p tcp 443
libsemanage.get_users: user xguest not in password file
[root@n007 etc]# semanage port -l | grep ssh
ssh_port_t                     tcp      443, 22
[root@n007 etc]# setenforce 0
[root@n007 etc]# setenforce 1
[root@n007 etc]# service sshd restart
sshd を停止中:                                             [  OK  ]
sshd を起動中:                                             [  OK  ]
[root@n007 etc]# getenforce
Enforcing
===/
#SCP
##ハマリポイント: 引数の順番が決まっていて、入れ替えが効かない。当たるまでひたすら引数の順番を変える。
##ポート設定のオプション
-P : 大文字のP(sshとおぷしょんがちがう)

#systemd
##logに対するtail -f 的な使い方
journalctl -f

#FireWall
##firewalld: CentOS7
systemctl enable firewalld
systemctl start firewalld
firewall-cmd --permanent --zone=public --addport=8080/tcp
##ipフォワードのチェック
cat /proc/sys/net/ipv4/ip_forward

#Gateway
##adding default gateway
route add default gw <ipaddr>
##delete default gateway
route del default

#LVM
#以下のコマンドあやしい?
##pvcreate
- pvcreate
##vgcreate
##複数のpvをグループ化
- vgcreate
##pool作る
-? lvcreate -l 100%FREE -T /dev/mapper/VolGroop00/Pool00
##割り当て
-? lvcreate -V 2.73T -T /dev/mapper/VolGroup-Pool00 -n lv_bank
-(こっちが正しい?) lvcreate -V 2.73T -T /dev/mapper/VolGroup00-Pool00 -n lv_bank
##実体
/dev/VolGroup00/lv_bank

#NFS(CentOS6)
##サーバー側
###設定
- http://wingse.blog57.fc2.com/blog-entry-288.html
- /etc/sysconfig/nfs
 MOUNTD_NFS_V2="no"
 MOUNTD_NFS_V3="yes"
 LOCKD_TCPPORT=32803
 LOCKD_UDPPORT=32769
 MOUNTD_PORT=892
 STATD_PORT=662
- /etc/exports
/BANK/  144.213.7.82/255.255.255.0(rw,sync,no_root_squash)
- /etc/sysconfig/iptables
111
875
2049
- /etc/hosts.allow
ALL: 127.0.0.1
ALL: <init>
- ターゲットファイル
chown -R nfsnobody <target>
###サービス起動
service rpcbind start
service nfslock start
service nfs start
##クライアント側
###サービス起動
service rpcbind start
service netfs start
###マウント
mount -t nfs 192.168.1.100:/mnt/nfs /nfs

#ZFS
##リスト
zpool get all

#iSCSI
##ドキュメント
- http://www.unix-power.net/linux/iscsi.html
##新領域セットアップ手順
###ターゲット
0. iscsiがすでにつかえるとして
1. 設定ファイル編集: freeBSD: /etc/ctr.conf
/===
 path /dev/zvol/data/komorido
===/
2. ZFSボリューム作成: freeBSD: sudo zfs create -V 100G data/komorido
###イニシエータ
0. iscscがすでにつかえるとして
1. login
2. mkfs
3. マウント or fdisk設定
##どのデバイスがどのサーバ(ターゲット)から提供されているか？
- イニシエータ側のiscsictlでconnectしたときのみ表示?
-- iscsictl -A -p 10.10.10.10 -t iqn.2012-06.com.example:target0
- iscsi-ls ?
##FreeBSDでのターゲットの設定ファイル:
/etc/ctl.conf

#yum
##yumのデータベースからエントリを削除
yum --tsflags=justdb remove 'scim*'

#rpm
##rpmbuild
##BUILD/以下にmakeのためのディレクトリができる:
rpmbuild --rebuild *src.rpm
##RPMS/以下にrpmができる(SRPMS/に*.src.rpm必要):
rpmbuild -ba *.spec
##rpmによるまだインストールされていないパッケージリストの問い合わせ。
rpm -qpl bash-completion-20060301-4.el5.noarch.rpm
##rpmによる特定のファイルがどのパッケージに含まれるかの検索。
rpm -qf /bin/ls
##rpmパッケージ削除/データベースを強制的に修正
rpm -e --justdb package.rpm
##rpmデータベースの修復
rpm --rebuilddb

#debian: apt-get
apt-get update
公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY 鍵の文字列のエラーが出るとき
gpg --keyserver pgp.nic.ad.jp --recv-keys 鍵の文字列
sudo gpg --armor --export 鍵の文字列 | sudo apt-key add -
sudo apt-get update
##aptのproxy設定 -> ##aptのproxy

#sudo
##inheritance of user env
sudo -E xxx

#mount
##イメージファイルの作成とマウント
###作成
truncate -s 10GiB image1.img
###ループバックデバイスと関連付け
sudo losetup -f
 /dev/loop0
sudo losetup /dev/loop0 image1.img
###パーティショニング
fdisk
 /dev/loop0p1
###フォーマット
mkfs.ext4 /dev/loop0
###マウント
sudo mount /dev/loop0 /mnt/tmp1/
###アンマウント
###関連付け解除
sudo losetup -d /dev/loop0

#find
## パーミッションの一括変換
find public_html -type d -exec chmod 755 {} \;
## search by time stamp
### within 7 days
find ./ -type f -mtime -7 -exec ls -l {} \;
### within 60 minits
find ./ -type f -mmin -60 -ls

#xargs
find ./  | xargs /BANK/PMC/bin/extract-title.pl
## オプション -IXXX で、XXXを任意の場所に挿入
find Ar* | xargs -IF /BANK/PMC/bin/match_position qf=/BANK/Organiztion/RIKEN-BRC_2012/organization-name/org.name.only sf=F

#strace
##ファイルに出力
strace -o file ls

#lsof
##port:3000を利用しているPID
sudo lsof -i:3000

#logrotate
priority setting: /etc/logrotate.d/

#alternatives
- 切り替え:
alternatives --config java

#split
split -l `cat split-size` Jour-All.fname Jour-split.

#aspell
aspell --lang=en -c -t network.amano.tex

#cpioのextract
cat libstdc++-3.2.3-59.i386.cpio | cpio -id

#insert species name into .ffn files
for dir in `cat _Dir`; do cd $dir; for file in *ffn; do ./add_species_name.pl $file > $file.rev; done; cd ../; done

#gzipでもとのファイルを残す
gzip -c

#tar でgzip圧縮
tar zcvf files.tgz file1 file2

#date
##linux
###いま
date -d now
###フォーマット指定
date +"%Y-%m-%d:%H"
date +"%Y-%m-%d.%H:%M"
- UNIX時間で現時刻表示
date "+%s"
###変換
date -d "2016-12-26 00:00" +%s
##FreeBSD
###変換
date -j -f "%a %b %d %T %Z %Y" "Sat Jan 9 18:49:08 JST 2010" "+%s"
date -j -f "%m %d %T %Z %Y" "1 9 18:49:08 JST 2010" "+%s"
date -j -f "%d/%b/%Y:%T" "20/Dec/2016:03:52:42" "+%s"
date -j -f "%s" 1482173562 "%d/%b/%Y:%T"
date -j -f "%Y%m%d %T" "20170116 16:00:00" "+%s"


#tr
cat refxml.source.shtrim | tr [:lower:] [:upper:]

#keyboard config
##Ubuntu
sudo dpkg-reconfigure keyboard-configuration
##VirtualBox(windows-host)のハマりポイント
キボード認識が英語キーボードになっていることがありVBoxにも踏襲される。

#vim
##行頭に行番号を挿入
:%s/^/\=line('.').'^I'/
##文字コードを指定して開く
vim -c ":e ++enc=euc-jp" inedx.html

#TeX
##revtex4のインストール(http://be.nucl.ap.titech.ac.jp/~koba/cgi-bin/moin.cgi/Linux%20Memo)
1. texconfig コマンドで TEXMFLOCAL のパスを確認
 CONF を選択
2. revtex4.zip をダウンロード、展開。
3. README の Installation を確認し、$TEXMFLOCAL/tex/latex/revtex4 に、以下のファイルを置く。
 $TEXMFLOCAL/tex/latex に revtex4 というディレクトリがなければ作る。(パーミッションは特に気にしない。)
- 10pt.rtx
- 11pt.rtx
- 12pt.rtx
- aps.rtx
- revsymb.sty
- revtex4.cls
- rmp.rtx
4. $TEXMFLOCAL/bibtex/bst/revtex4 に、以下のファイルを置く。$TEXMFLOCAL/bibtex/bst に revtex4 というディレクトリがなければ作る。
- apsrev.bst
- apsrmp.bst
5. スーパーユーザー で texconfig コマンドを実行。 REAHSH を選択。これで revtex4.cls にパスが通る。これを実行しないと以下のエラーとなる。
! LaTeX Error: File `revtex4.cls' not found.
6. /usr/local/share/texmf/tex/latex/revtex4/sample/apssamp.tex をコンパイル。\endnoteに対してエラーがでるが、その他はOK。

#dvips
##フォントの埋め込み:
pdvips -D600 -P pdf jcc.jslis.dvi 
dvipdfmx -f texfonts.map  sample.dvi
##ファイルに出力:
pdvips -D2400 -P pdf -f cluster-validity.dvi > tmp.ps

#cdrecord
cdrecord fs=16m dev=/dev/hdd -dao driveropts=burnfree -v -data -nopad /BANK/OS/OpenSolaris/os200805.iso
cdrecord fs=16m dev=/dev/hdd -dao driveropts=burnfree -v -data -nopad /BANK/OperatingSystem.img/Ubuntu/ubuntu-ja-9.04-desktop-i386.iso
cdrecord fs=16m dev=/dev/hdd -dao driveropts=burnfree -v -data -nopad /home/kamano/download/ubuntu-ja-8.10-desktop-i386.iso

#wget
##wgetの結果を標準出力
wget http://192.168.0.4/ -O -
##no proxy
wget --no-proxy
##port
wget http://xxx.xxx.xxx:8080/home/

#nkfで文字コードを推測する
nkf -g hoge.txt

#mecab
mecab -d /usr/share/mecab/dic/mecab-ipadic

#mpage アウトライン無し2page/A4
mpage -o -2 k_amano.ps > k_amano.mpage.ps

#sorthex.plの使いかた:
sorthex.pl -f 2 file.txt

#mailコマンドでメイルおくる
mail kamano@affrc.go.jp -- -f amano@brc.riken.jp

#hexstring2bytecodeの使い方
#hogeとtmpはおなじはずだがtmpに改行が余計に入っている?
cat hoge | string_to_hexcode | tr -d '\n' | sed -e 's/://g' | ./hexstring2bytecode > tmp

#screen
##スクリーンデーモンリスト
screen -ls
##デタッチされているスクリーンデーモンに接続
screen -r <pid>
##アタッチされているスクリーンデーモンに接続
screen -rx
##screenのdetouch
[ctrl]a d
##screen内の仮想端末のリスト
[ctrl]a w
##screen内に新しい仮想端末を追加
[ctrl]a c
##screen内の仮想端末間の移動
[ctrl]a n
[ctrl]a p

#X-window
#設定
Xorg -configure

#vnc
##sshでサーバに接続
vncserver :1 -geometry 1200x800
##クライアントで接続
##クライアントでlogoff
vncserver -kill :1

#Xen
##consoleのアタッチ
xm console <domain name>
 +(リターン2回)
##consoleのデタッチ
[ctrl]"]"

#KVM
##virt-install
virt-install --name=SL62 --ram=2000 --vcpus=1 --location='/ARCHIVE/OS/SL62/SL-62-x86_64-2012-02-06-Install-DVD.iso' --os-type='linux' --file=/var/lib/libvirt/images/sl62.img --file-size=10 --bridge=virbr0
##設定変更(最大CPU数など変更できる)
virsh edit <マシン名>
-誤: file: /etc/libvirt/qemu/<マシン名>.xml を直接書き換えても反映されない。
##直接CPU数を設定
virsh setvcpus <マシン名> --count 4
##コンソールリスト
sudo su -
virsh list --all
##start
virsh start cent7
##コンソール接続
virsh -c qemu:///system console sl62
virsh console sl62
##create raw image
qemu-img create -f raw ubuntu16.img 80G
##rawイメージのマウント
mount -o loop,offset=32256 vm006.img /mnt/vimg0
##イメージの拡張
qemu-img resize raw.img +80G
##convert image
qemu-img convert -f vmdk amaayo.vmdk -O raw amaayo-flat.vmdk.img #amaayo.vmdk is not a image, but a setting file.
##imgのマウント
kpartx -av disk.img
mount /dev/mapper/loop0p1 /mnt/kvmimg
umount /mnt/kvmimg
kpartx -dv disk.img
##仮想ゲストのvirbr0とホストのvirbr0が競合する場合
とりあえず、仮想ゲスト側のvirbr0をkill
##仮想マシンのipaddr
仮想マシンに login ifconfig
## to kill guest virbr0
virsh net-destroy default
virsh net-autostart default --disable
virsh net-list --all #check
##ssh login to vmguest
### eth address should be created:
ifconfig #on vmguest
eth0 ....
### bridge dev should be created:
ifconfig #on vmhost
virbr0 ....
### ssh from vmhost
ssh xxx@192.168.122.xxx (ethx on vmguest)
## when vmguest network is disorder
- to solve : reboot of VMG and VMH
## guest network insterface:
/===
TYPE=Ethernet
BOOTPROTO=dhcp
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME=eth0
UUID=432e941f-357c-4547-9ed0-a8626cf317df
DEVICE=eth0
ONBOOT=yes
DNS1=127.0.1.1
PEERDNS=no
PEERROUTES=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_PRIVACY=no
===/
##ゲストのネットワークが落ちる問題
- 複数のゲストを起動中に落ちる
- libvirtdの再起動とゲストの再起動で復帰
- 原因はホストのDHCP機能?
##一般ユーザーでvirt-manager
- 参考: http://inaz2.hatenablog.com/entry/2013/06/21/004454
- libvirt group を作る
- 利用させたいユーザーを libvirt group に参加
- /etc/libvirt/libvirtd.conf を編集
/===
unix_sock_group = "libvirt"
unix_sock_rw_perms = "0770"
auth_unix_rw = "none"
===/
- /etc/libvirt/qemu.conf を編集
/===
#参加させたいゆーざーを列挙
user = ...
user = ...
group = "libvirt"
dynamic_ownership = 1
===/

#VirtualBox
##ホストからゲストにssh接続
Natでポートフォワーディングを設定する。
Host port : 2223
Guest port : 22
ホストからlogin
$ ssh -p <ホストポート番号> <ログインユーザー>@localhost
##mac(ホスト)のハマりポイント
キーボード入力
##デバイスにコピーイメージをアサインできない
http://www.webzoit.net/hp/it/internet/homepage/env/cs/virtual_machine/move_copy/

#Git
##gitのproxy設定 -> ##ssh(git)のproxy
##gitことはじめ
https://github.com/
githubでリポジトリ作成
メッセージにしたがってソースコードをpushまでおこなう。
プロジェクトごとに.gitつくる
##あたらしいレポジトリの作成(1)
###githubにアクセスし右上のアイコン<Create a New Repo>をクリック
###clone 元URLをコピー、clone
git clone ...
###git push
> .gitignore
git add .gitignore
git commit
git push origin master
##あたらしいレポジトリの作成(2)
###githubにアクセスし右上のアイコン<Create a New Repo>をクリック
###メッセージにしたがいリポジトリを作成、
###おなじくメッセージにしたがいローカルでディレクトリを作成、コミット。
###git config
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
###git pull
プロジェクトのディレクトリで
git pull <URL>
git pull origin master
git pull --all
##git clone
githubにpubkeyを登録してsshでclone。
##git add (新しいファイルを作ったとき)
##git commit (更新をコミット)
##git push
git add <program>
git commit
git push origin master
##push先の変更
git remote rm origin
git remote add origin git@github.com:tsunekawa/baum.git
##branchの作成
git branch <ブランチ名>
##brunch間の移動
git checkout <branch>
##branchのリスト閲覧
git branch -a
##強制的にpull(1)
git checkout -- .
git pull
##強制的にpull(2)
git fetch origin
git reset --hard origin/master
##pushできないときの対応
### ex.1
git remote set-url origin https://kouamano@github.com/kouamano/SOC.git
unset SSH_ASKPASS
##ファイルを特定のcommit状態に戻す
git checkout <commit番号> <ファイル>
##未解決問題
###forkしたリポジトリへのpush
  ! [remote rejected] master -> master (permission denied)
   error: failed to push some refs to 'git@github.com:kamano-at-nims/utility.git'
 branchをつくらないとダメなのか？
 - http://kik.xii.jp/archives/179

#GitHub
- 参照: http://qiita.com/shunjikonishi/items/c5024e70b0878817725f
##issueの検索
created / updated / mereged /closed
 created:<2015-04-01
 updated:>=2015-04-01T18:00:00+09:00
 merged:2015-04-01..2015-05-01
###特定のユーザーのリポジトリの検索
user:kouamano cvi
###所属するorganizationののリポジトリの検索
org:nims-library nimspapers

#GitHubAPI
- 参考:
https://developer.github.com/v3/oauth/
http://qiita.com/KENJU/items/1f02720f1f64c657cc44
- curl
-- tokenを使わない例:
--- ユーザー/組織情報
curl https://api.github.con/users/kouamano - 503
curl -i -u 自分のユーザ名 https://api.github.com/users/ユーザ名 ##ユーザー情報
curl -i -u kouamano https://api.github.com/users/kouamano ##ユーザー情報
curl -i -u "kouamano:<pass>" https://api.github.com/users/kouamano ##ユーザー情報
curl -i -u "kouamano:<pass>" https://api.github.com/users/nims-library ##組織情報
--- リポジトリ情報
curl -i -u "kouamano:<pass>" https://api.github.com/users/nims-library/repos ##リポジトリ情報、プライベート以外
curl -i -u "kouamano:<pass>" https://api.github.com/orgs/nims-library/repos ##リポジトリ情報、プライベート含む
curl -i -u "kouamano:<pass>" https://api.github.com/orgs/nims-library/repos | /home/kamano/gitsrc/JSONOP/git_ReponameFromRepolist.pl ##リポジトリ名のみ取得
--- issue情報
curl https://github.com/kouamano/test/issues
curl -i -u "kouamano:<pass>" https://github.com/kouamano/test
curl -i -u "kouamano:<pass>" https://github.com/kouamano/test/issues
curl -i -u "kouamano:<pass>" https://github.com/nims-library/samurai2
curl -i -u "kouamano:<pass>" https://github.com/nims-library/ninja/issues - 404
curl -i -u "kouamano:<pass>" https://api.github.com/repos/kouamano/test/issues
curl -i -u "kouamano:<pass>" https://api.github.com/repos/nims-library/library/issues

-- token使用例:
curl -H "Authorization: token <token>" https://api.github.com/user

#svn
##svn リポジトリ作成 (サーバ側)
svnadmin create /usr/local/var/svn/repos/ArticleMatchSystem
##svnサーバのconf書き換え: svnserve.conf に以下を追記
anon-access = read
auth-access = write
password-db = passwd
##svnサーバのパスワード設定: passwd にこんな感じで追記
harry = harryssecret
##svn ファイアウオール (サーバ側): /etc/sysconfig/iptables を編集、以下を追記
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m udp -p udp --dport 3690 -j ACCEPT
##svn server起動 (サーバ側)
svnserve -d -r /usr/local/var/svn/repos/ArticleMatchSystem
##svnのユーザ指定(未確認)
svn --username NAME
##svn import (クライアント:最初に行うリポジトリへのコミットのこと)
#エディタが起動し、それをぬけて続行するとパスワードを求められる
cd /home/kamano/src1
svn import ./ArticleMatchSystem svn://n003/repos/ArticleMatchSystem
##svn checkout (クライアント:リポジトリの情報をローカルにコピー)
cd /home/kamano/test/
svn checkout svn://192.168.0.3/repos/ArticleMatchSystem
svn checkout svn://amano@jewela.tu1135.riken.jp:3696/var/www/svn/web
##svn status
svn status
##svn commit (ci) (クライアント:ローカルカレントディレクトリの情報をリポジトリにコピー: 新しくできたディレクトリに移動しないといけない)
cd /home/kamano/test/ArticleMatchSystem
vim tmp
svn commit
##svn diff
##diffれるのはURL、svn://jewela.tu1135.riken.jp:3695/var/www/svn/web をprependすべし
svn diff svn://jewela.tu1135.riken.jp:3695/var/www/svn/web/test/php/pg/qa_list/console.tpl@22390 svn://jewela.tu1135.riken.jp:3695/var/www/svn/web/jlm_ja/php/pg/qa_list/console.tpl@22392
##svn log
##sedを使って大川さんのログだけ取り出す
svn log  -v | sed -n '/ookawa/,/----$/ p'
svn log  -v | sed -n '/| yookawa |/,/----$/ p'

#Java
##jar で.jarを見る
jar tvf <ファイル>
#eclipse
##CentOS 6.5
##64bit版を指定してjava VMを機動 <- aliasを設定
alias eclipse='/usr/local/eclipse4.4/eclipse -vm /usr/bin/java'
#JBoss
##setting examples
-Dhttp.proxyHost=wwwout.xxx.xxx.xxx:8888
-DnonProxyHosts="localhost|*.xxx.xxx.xxx|192.168.*.*"
#Lucene
#lucene-4.10.0
##ダウンロード:
lucene-4.10.0.tgz
pache-ant-1.9.4-bin.zip
apache-ivy-2.2.0-bin.tar.gz
##java + ant + ivy のパスの設定(.bashrc):
export ANT_HOME=/usr/local/ant
export JAVA_HOME=/usr/java/default
export PATH=${PATH}:${ANT_HOME}/bin
##クラスパスの設定(.bashrc):
export CLASSPATH=${CLASSPATH}:/usr/local/lucene-4.10.0/core/lucene-core-4.10.0.jar:/usr/local/lucene-4.10.0/queryparser/lucene-queryparser-4.10.0.jar:/usr/local/lucene-4.10.0/analysis/common/lucene-analyzers-common-4.10.0.jar:/usr/local/lucene-4.10.0/demo/lucene-demo-4.10.0.jar
##srcディレクトリの作成(root):
cd /usr/local/lucene-4.10.0
mkdir src
##デモ(srcが空なので何もインデックスされない)(root):
java org.apache.lucene.demo.IndexFiles -docs /usr/local/lucene-4.10.0/src
##switch Java version
alternatives --config java
##setting Proxy
-Dhttp.proxyHost=webcache.mydomain.com -Dhttp.proxyPort=8080
##setting nonProxy
-Dhttp.nonProxyHosts=localhost|127.0.0.1|10.0.*.*

#Apache http server
##Reverse Proxy
-  参考ページ: http://www.rickynews.com/blog/2014/08/25/why-you-need-to-use-reverse-proxy/
##Basic認証
- パスワードファイル: /etc/httpd/conf/.htpasswd
-- コマンド: htpasswd
- 設定ファイル: <認証させたいDIR>/.htaccess
- example: htpasswd -b -c -m /etc/httpd/conf/.htpasswd centos centospassos
/===
Options +ExecCGI
AddHandler cgi-script .cgi .py htpasswd
AddType application/x-httpd-php .php .html
AuthUserFile /etc/httpd/conf/.htpasswd
AuthName "kamano"
AuthType Basic
Require valid-user
===/

#mapserver config:
./configure --with-proj --with-gdal --with-ogr --with-geos --with-gd --with-postgis=/usr/bin/pg_config --with-httpd=/usr/local/apache2/bin/httpd --with-php=/usr/include/php

#nifH関係
for file in `cat species_add.cand_ex.2.ov50.Dir.sort.uniq`; do cat /BANK/SEQUENCE/ncbi/genomes/Bacteria/$file/*rev; done | ./extract_420-450.pl > Arch+Bac.420-450.ffn.rev

#murasaki
time murasaki -p11001100 -dHs17-Mm11 /BANK/SEQUENCE/ncbi/genomes/H_sapiens/Assembled_chromosomes/hs_ref_chr17.fa /BANK/SEQUENCE/ncbi/genomes/M_musclus/Assembled_chromosomes/mm_ref_chr11.fa

#blast+
##makeblastdb (使いかたよくわからん、これでよいのか? -> よいらしい)
makeblastdb -in GI-fname-CDS.fasta.faa -input_type fasta
##DNA
makeblastdb -in mm_ref_chrX.fa.gz.cut.50 -dbtype nucl -input_type fasta
##blastp (blastpを行うディレクトリはdbのあるディレクトリでないといけない? とはか ぎらない?)
##アミノ酸
blastp -query GI-fname-CDS.fasta -db ./GI-fname-CDS.fasta
blastp -query 89member.fasta -db /BANK/SEQUENCE/blastdb/Bacteria.20100925.top3group/44_89_94member.fasta
##blastn
blastn -query test_query.fasta -db ./mm_ref_chrX.fa.gz.cut.50 > test_query.fasta.result

#megablast
megablast -d /BANK/SEQUENCE/ncbi/blastdb/cut1000/cfa_chr9.fa.cut -i /BANK/SEQUENCE/ncbi/cut1000/H_sapiens/hs_ref_chr17.cut -W 25 -o hs_chr17-cf_chr9.mega-W25

#megablast
time for file in /BANK/SEQUENCE/frame/cut1000/H_sapiens/*; do   /usr/local/blast-2.2.18/bin/megablast -d /BANK/SEQUENCE/blastdb/cut1000/mm_ref_chrAll.cut -i $file -W 50 -o ${file##*\/}-mm_ref_chrAll.cut-W50; done

#blastall
blastn ・・・ 塩基配列対塩基配列の比較を行うためのプログラム。
blastp ・・・ アミノ酸配列対アミノ酸配列の比較を行うためのプログラム。
plastx ・・・ 塩基配列(質問配列)対アミノ酸配列(データベース配列)の比較を行うためのプログラム。
tblastn ・・・ アミノ酸配列(質問配列)対塩基配列(データベース配列)の比較を行うためのプログラム。
tblastx ・・・ 塩基配列対塩基配列の比較を、アミノ酸配列に翻訳して行うためのプログラム。

#graphviz
##graphviz サンプル (utf8を使うこと):
digraph sample3 {
 node [ fontname = "ipag" shape = box ];
 form    [ label = "会員情報入力画面" ];
 confirm [ label = "会員情報入力確認画面" ];
 finish  [ label = "会員情報入力完了画面" ];
 form -> confirm [ dir = both ];
 confirm -> finish;
}
##graphviz:dotの例:
dot -Kdot -Tsvg sample3.utf.dot -o sample3.utf.svg
dot -Kdot -Tps test2.utf.dot -o test.ps 

#Mathematica
##subkernel
/usr/local/Wolfram/Mathematica/7.0/Executables/math -subkernel -noinit -mathlink
numactl --cpubind=0 /usr/local/Wolfram/Mathematica/7.0/Executables/math -subkernel -noinit -mathlink
numactl --physcpubind=0 /usr/local/Wolfram/Mathematica/7.0/Executables/math -subkernel -noinit -mathlink
##macのコマンドライン起動
- Ver. 9:
/Applications/Mathematica.app/Contents/MacOS/MathKernal
##リストからすべてのペアを取り出す
Permutations[l, {2}]

#R
##position
pos=which(targetList == min(targetList));
##ライブラリのロード
##ライブラリ形式でcoding
##確認:
gcc -lm -c MST.lib.c
##Rによるコンパイル:
R R CMD SHLIB MST.lib.c
##R起動:
R
##ライブラリをロード:
> dyn.load("./MST.lib.so")

#matlab
## matlabではステートメントの返り値を直接操作できない
size(SpCountCat)(1)	#エラーになる
msize = size(SpCountCat)	#一旦変数に代入
msize(1)	#OK
## かれんとディレクトリのファイル(ワイルドカード)を得て、配列変数に代入:
files = (dir('*.sptbl'))
## ライセンス情報の出力は、matlabを起動後、コマンドで
ver
## coapTabの対角要素をゼロに置き換える
coapTab(eye(size(coapTab))~=0)=0
## strcat()  で気をつける:
strcat()は文字列の配列(cell型)を返すことがある。
## save sparse matrix:
>> CoapRes
>> [i,j,v]=find(CoapRes)
>> data=[i,j,v];
>> fd=fopen('count_pos_MMs_AllResNames-U_Jour-All.CoapRes.sp.dat','w')
>> fprintf(fd,'%d %d %d\n',transpose(data))
>> fclose(fd)
## 変数の型
class()
##ハッシュ(マップ)
m=containers.Map({'aa','aab'},{1,3})
m('aab')
ans = 3
###全要素へのアクセス
keys(m)
values(m)
##gpu
https://jp.mathworks.com/help/distcomp/run-built-in-functions-on-a-gpu.html
Ga = rand(1000,'single','gpuArray');
Gfft = fft(Ga); 
Gb = (real(Gfft) + Ga) * 6;
G = gather(Gb);

#C
##gcc 最適化
gcc -O3 -m64 regionposition.c -lm -o regionposition
##clone()システムコール
clone(A,B,C,D)
A: 関数へのポインタ
B: 何かのポインタ
C: フラグ
D: 関数Aの引数へのポインタ; グローバル領域でないとダメ、malloc()必要。複数の引数があるとき、たぶん、構造体を使わないとダメ。
##Cの変数
global/localは単にプログラムソースコード上での呼び名ぽい。
動的メモリ確保を要求するかどうかとは独立。
->globalだからといってheap領域に確保されるわけではない。
##qsort():
qsort()の第一引数baseについて:
baseに対するmalloc()は1次配列までしか対応できない。
##qsort()の例:
/===
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "/home/pub/include/alloc.c"
int mat[10][5];
typedef int bigint[10];
//int **mat;
int *vec;

int cmp(int *x, int *y){
        if(*x < *y){
                return(-1);
        }else if(*x > *y){
                return(1);
        }else{
                return(0);
        }
}

int cmp_v(int *x, int *y){
        if(*(x+1) < *(y+1)){
                return(-1);
        }else if(*(x+1) > *(y+1)){
                return(1);
        }else{
                return(0);
        }
}

int main(){
        int i,j;
        /*
        mat = malloc(sizeof(int *)*10);
        for(i=0;i<10;i++){
                mat[i] = malloc(sizeof(int)*5);
        }
        */
        vec = i_calloc_vec(10);
        vec[0] = 5;
        vec[1] = 0;
        vec[2] = 7;
        vec[3] = 9;
        vec[4] = 15;
        vec[5] = 12;
        vec[8] = 10;
        mat[0][0] = 2;
        mat[0][1] = 7;
        mat[0][2] = 6;
        mat[0][3] = 8;
        mat[0][4] = 7;
        mat[1][1] = 7;
        mat[2][1] = 9;
        mat[3][1] = 10;
        mat[4][1] = 2;
        mat[5][1] = 7;
        mat[6][1] = 8;
        mat[7][1] = 6;
        mat[8][1] = 20;
        mat[9][1] = 1;
        for(i=0;i<10;i++){
                printf("%d\n",vec[i]);
        }
        qsort(vec,10,sizeof(int),(int(*)(const void*, const void*))&cmp);
        printf("-----\n");
        for(i=0;i<10;i++){
                printf("%d\n",vec[i]);
        }
        printf("-----\n");
        for(i=0;i<10;i++){
                for(j=0;j<5;j++){
                        printf(" %d",mat[i][j]);
                }
                printf("\n");
        }
        qsort(mat,10,sizeof(int)*5,(int(*)(const void*, const void*))cmp_v);
        printf("-----\n");
        for(i=0;i<10;i++){
                for(j=0;j<5;j++){
                        printf(" %d",mat[i][j]);
                }
                printf("\n");
        }
        return(0);
}
===/
##C言語高精度タイマの例:
/===
#include <stdlib.h>
#include <time.h>
int main(int atgc, char **argv){
        struct timeval curr_timeHR;
        time_t curr_time;
        gettimeofday(&curr_timeHR,NULL);
        time(&curr_time);
        printf("curr_timeHR.tv_sec:%lld:\n",curr_timeHR.tv_sec);
        printf("curr_timeHR.tv_usec:%lld/1000000:\n",curr_timeHR.tv_usec);
        printf("curr_timeHR.tv_usec:%f:\n",(double)(curr_timeHR.tv_usec)/1000000);
        printf("curr_time:%lld:\n",curr_time);
        printf("curr_time::date:%s:",ctime(&curr_time));
        return(0);
}
===/
##C言語のtime_t
は、long int

#perl
##perlの区切り文字:
$\ に代入できる
chomp の対象となる
##perlの後方参照:
\1 と $1 があり、いまいち用途不明。
print の対象となる場合には $1 を使用しないとおかしくなる。
スクリプト内でパターンとして参照する場合には \1 でないと参照されない。
##スペースによるsplit
($f,$l) = split(' ',$_);	#タブ等にもマッチする
($f,$l) = split(/ /,$_);	#スペースのみにマッチする
($f,$l) = split(" ",$_);	#ストリング("")は正しく参照されないらしい。 -> コードのチェック。
##perl:一行中で複数パターンマッチがあるときその全てを配列に入れる::
while(<>){
        @hit = $_ =~ /(h.g)/g;
        foreach $j (@hit) {
                print "$j\n";
        }
}
##複数の文字列にマッチ
$str -~ s/(?:Hello)|(?:test)/hit/g;
##(xml等の)コメントを同じ長さの空白に置き換える
$tx =~ s/(<!--.*?-->)/$count=0;$sb="";while($count < length($1)){$sb = $sb." "; $count++;};$sb/eg;
##perlの逐次マッチ
		while($len > 0){				#パターンのヒットが無くなればブレーク(パターンのlengthで判定)
                        if($res =~ /.*[\s]+(ref[^\n]+\n).*/){	#もしマッチさせたいパターンがあれば、
                                $hit = $1;			#そのパターンを抜き出し、
                                $hit =~ s/\n//g;
                                print $hit;
                                print " :::";
                                print $Q;
                                $len = length($hit);
                                $res =~ s/ref[^\n]+\n//;	#そのパターンを削除
                        }else{
                                $len = 0;
                        }
                }
##perlの数値オーバーフロー
16進表現を使用した場合、0x99******くらいからオーバーフローする。
##perlのマッチポジション
##マッチしたポジションを得る
while($txt =~ /computer/g){
	$p = pos($txt);
}
##さらにそのポジションを変更
pos($txt) = $p - length($1);
##特定の文字列にマッチしないパターン
- "<ORG>"文字列にマッチしない文字列にマッチ: ((?!<ORG>).)*
-- 例: $l =~ s/(<ORG>.+?<\/ORG>.*?<[0-9]*W>.+?<\/[0-9]*W>)(((?!<ORG>).)+)/$1<RESc>$2<\/RESc>/g;

#python
##おすすめインストール
http://qiita.com/y__sama/items/5b62d31cb7e6ed50f02c
-    Windows: anaconda(or miniconda)
-    linux: git + pyenv + anaconda(or miniconda)
-    MacOS: homebrew + pyenv + anaconda(or miniconda)
-    ChromeOS: chromebrew + git + pyenv + anaconda(or miniconda)
##定義のロード
execfile(<ファイル名>)
## nltkのインストール
rpm -ivh python-nltk-2.0.4-2.el6.1.noarch
### データのインストール
### pythonを起動
python
### pythonコマンド
import numpy
importl nltk
nltk.download()
### GUIが起動する
### GUIにしたがってデータをインストール
##pip
###インストール
yum install yum install python-pip
###pipを使ったアップグレード
pip install --upgrade numpy
###proxy
pip install <pkg> --proxy=wwwout.xxxx.xx.xx:8888
##numpy
###固有値、固有ベクトルの対応
eigval,eigvec = np.linalg.eig()
eigval[i]に対応するのはeigvec[:,i]となる


#Ruby
##rubygemsのインストール
tar zxvf rubygems-1.0.1.tgz
cd rubygems-1.0.1
ruby setup.rb config
ruby setup.rb setup
ruby setup.rb install
##nokogiri
###HTML
- URL: http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/#7
###XML
- URL: http://d.hatena.ne.jp/otn/20090509/p1
##後方参照 -> () カッコ を　$1,$2,...
str.match(/(.+)/)
puts $1
##マッチ部分全体を後方参照できる
$&
##変数は小文字で始まるべし
##変数の種類(型)
- foo : ローカル変数
- $foo : グローバル変数
- @foo : インスタンス変数
- @@foo : クラス変数

#Rails
##一般参考
- ひとつのアプリで複数モデル(DB)使う:
-- http://jetglass.hatenablog.jp/entry/2015/04/15/165236
- モデル間横断検索?
-- http://www.prime-architect.co.jp/myblog/ruby-on-rails-1566
##インストール
- https://tsuchikazu.net/linux_ruby_on_rails_install/
- http://qiita.com/egnr-in-6matroom/items/c84a1d3896f1015be8d2 (一番簡単)
##サービス起動
rails s -b 0.0.0.0
##Railsアプリの起動
###solrの起動:
bundle exec rake sunspot:solr:start
###solrの再起動(restartで失敗する場合がある?):
bundle exec rake sunspot:solr:stop
bundle exec rake sunspot:solr:start
###solrの再インデックス
- アプリ全体:
 bundle exec rake sunspot:solr:reindex
- モデル指定例(1):
 bundle exec rake sunspot:solr:reindex[<一回分の件数>,PatentPublication]
 rails c; Sunspot.commmit
- モデル指定例(2):
 bundle exec rake sunspot:solr:reindex[,PatentPubpatent]
 rails c; Sunspot.commmit
- モデル指定例(3):
 rails c;
 PatentPublication.reindex
 Sunspot.commit
- 条件指定例(1)
 rails c;
 PatentPatent.where('created_at >= ?','2016-06-27 12:00:00').map{|patent| patent.index}
 Sunspot.commit
- 条件指定例(2)
 rails c;
 PatentRepublication.where('id >= ? and id <= ?','0','5000').map{|patent| patent.index}
 Sunspot.commit
###springのstart/stop
bundle exec spring start
bundle exec spring stop
##Railsアプリのインストール
###sunspotrailsのインストール
- http://ruby-rails.hatenadiary.com/entry/20150223/1424695504#sunspot-install
- file: Gemfile
/===
gem 'sunspot_rails'
gem 'sunspot_solr' 
===/
- バンドル
bundle install
- コンフィグファイルの生成:
rails generate sunspot_rails:install
-- 場所: 
config/sunspot.yml
##Railsアプリの作成(postgresql)
rails new <application_name> -d postgresql #ディレクトリができる
###モデルの作成
cd <application_name> #特定のアプリケーションディレクトリに移動
rails g scaffold PatentApplication doc_number_s:string title:text applicant:text agent:text inventor:text classification_ipc:text fterm:text ref_cited:text description:text
###モデルの修正
db/migrate/ 以下の .rbを修正
- index: true, unique: true などを追加
app/models/ 以下の .rbを修正
app/controllers/ 以下の
app/views/ 以下の
###DBへカラム追加の反映
rails generate migration AddOwnersToPatentPatents owner:text
rake db:migrate
###migration
rake db:migrate
###モデルの破棄(DBの破棄は行われない)
rails destroy model <modelname>
###コントローラーの破棄(DBの破棄は行われない)
rails destroy controller <modelname>
###DB関係の設定
####DBサーバー:
config/database.yml
####table設計:
db/migrate/*.rb
##モデルとDBから特定のレコードを削除
rails c;
ds = PatentRepublication.where('id = ?','18832')
ds.destroy_all
### DBの破棄
#### マイグレーションファイル作成
#### マイグレーションファイルに削除記述追加
#### マイグレーション実行
#### あるいは直接DBを削除
##railsからDBのエントリの全ケシ
<model>.destroy_all
##railsからDBエントリを削除
rake db:reset
##railsでDBをロールバック(DBのロールバックのみ、ファイルは管理されない)
rake db:rollback
##フルテキストサーチの実装
- http://morizyun.github.io/blog/search-form-rails-bootstrap/
###1. models/においてsearchable 設定
###2. views/において表示項目 設定
###3. controllers/において検索 設定
##runner
スクリプトをRails環境で実行する(スクリプト内ではrailsの環境(モデルなど)が使える):
rails runner <script> <引数>
##railsのコンソールに接続
rails console -e production
###コンソールからの検索
- ex.1
(irb) search = PatentUsTsv.search {fulltext "Mg"}
(irb) res = search.results
(irb) res.count
- ex.2
(irb) PatentPatent.where('created_at >= ?','2016-06-22 00:00:00').count
###コンソールから検索してインデックス
- ex.3
(irb) PatentPatent.where('created_at >= ?','2016-06-22').map{|patent| patent.index}
(irb) Sunspot.commit
##railsからDBに接続
rails dbconsole -e production
##try
tryをつかうと
/home/kamano/gist/xml2tsv.rb:14:in `block in <main>': undefined method `try' for nil:NilClass (NoMethodError)
-> require 'active_support/core_ext/object/try'
##forman
###systemd daemon 登録
sudo foreman export systemd -a tokkyodb -u kamano /etc/systemd/system/


#Postgresql
##postgres初期化(1)
[]# su - postgres
[]#initdb
##postgres初期化(2)
[]# su - postgres
[]$ initdb /BANK/pgsql/8.1
[]$ pg_ctl start -D /BANK/pgsql/8.1
[]$ createdb test
[]$ psql test	#接続
##connection test
psql template1 -h localhost -p 5432 -U postgres
psql -h achi -d tokkyodb_development -U kamano
##システムカタログ
###list DB
[] psql
=# select * from pg_database;
 OR
[] psql -l
##create table
CREATE TABLE organization (id int, top_level_organization_name text, organization_name text);
###カラム名
select * from pg_attribute;
###特定のテーブルのカラム名
select * from pg_attribute where attrelid = 'manifestations'::regclass;
###テーブル名
select * from pg_class;
##タプルデリート
delete  from patent_patents;
##テーブルオーナーの書き換え:
term_region=# ALTER TABLE public.organizationname_region OWNER TO kamano;
##カラムを文字列として結合(AとBをansとして結合、ans, Cを表示)
SELECT A || '-' || B ans , C from table;
SELECT name_code || '+' || brc_no from accession;
##テキストをcomma結合する集約関数
CREATE FUNCTION text_comma_join(text, text) RETURNS text AS '
	SELECT $1 || '','' || $2
' LANGUAGE SQL;

CREATE FUNCTION skip_initial(text) RETURNS text AS '
	SELECT substr($1, 2)
' LANGUAGE SQL;

CREATE AGGREGATE comma_join (
  BASETYPE = text,
  SFUNC = text_comma_join,
  STYPE = text,
  FINALFUNC = skip_initial,
  INITCOND = ''
);

##テキストをsemicolon結合する集約関数
CREATE FUNCTION text_semicolon_join(text, text) RETURNS text AS '
	SELECT $1 || '' ; '' || $2
' LANGUAGE SQL;

CREATE FUNCTION skip_three(text) RETURNS text AS '
	SELECT substr($1, 4)
' LANGUAGE SQL;

CREATE AGGREGATE semicolon_join (
  BASETYPE = text,
  SFUNC = text_semicolon_join,
  STYPE = text,
  FINALFUNC = skip_three,
  INITCOND = ''
);

##parent()
create function parent(text) returns text as '
	select line.background from line where(line.current = $1)
' LANGUAGE sql;

##parents()
create function parents(text) returns setof text as '
	select line.background from line where(line.current = $1)
' LANGUAGE sql;

##daughter()
create function daughter(text) returns text as '
	select line.current from line where(line.background = $1)
' LANGUAGE sql;

##daughters()
create function daughters(text) returns setof text as '
	select line.current from line where(line.background = $1)
' LANGUAGE sql;

##制約の確認
select * from information_schema.table_constraints;

##制約:例1
ALTER TABLE fact_data ADD primary key (fact_data);
ALTER TABLE fact_data ADD constraint fact unique (<colum_name>);
alter table patent_us_tsvs add constraint publication_number unique(publication_number);
ALTER TABLE accession_and_assay_and_fact_data ADD constraint assay_fact_data foreign key (fact_data) REFERENCES fact_data(fact_data) MATCH FULL;

##制約:例2
ALTER TABLE tbl1 add primary key (item1);

##制約:例3
ALTER TABLE region_type add constraint cons_region_type unique (region_type);
alter TABLE resourcename_region add constraint cons_region_type foreign key (region_type) references region_type(region_type);
ALTER TABLE organizationname_region add constraint cons_region_type foreign key (region_type) references region_type(region_type);

##外部接続の許可
$PGDATAディレクトリ以下のふたつのファイル
pg_hba.conf
postgresql.conf
をそれぞれ書き換え:
###pg_hba.conf の書き換え:
/===
# host       DATABASE  USER  CIDR-ADDRESS  METHOD  [OPTION]
---
host       all  all  192.168.0.5  255.255.255.255 trust
===/

###postgresql.conf の書き換え:
/===
#listen_addresses = 'localhost'         # what IP address(es) to listen on;
---
listen_addresses = '*'
===/

##dblink
###dblinkのインストール: そこから利用したい全てのデータベースに対し行う
psql -U postgres -d test < /usr/share/pgsql/contrib/dblink.sql
###dblink_connect()
SELECT dblink_connect('sassc','host=192.168.0.4 port=5432 dbname=sassc user=sassc password=Ra88Fr87');
###select from dblink
SELECT * from dblink('sassc', 'select * from gene') as t1(gene_symbol text, gene_name text, remarks text);
###select dblink_disconnect()
SELECT dblink_disconnect('sassc');

#mysql
##mariadb
 systemctl enable mariadb.service
 systemctl start mariadb.service

#BerkleyParser
## example1:
java -jar /usr/local/BerkleyParser/BerkeleyParser-1.7.jar -gr /usr/local/BerkleyParser/eng_sm6.gr -inputFile /BANK/PMC/20140724/terms/ALL/patt.4/ArtVSTerm/Word_Jour-au.sortuniq-eachline

#StanfordParser
## example:
java -mx200m edu.stanford.nlp.parser.lexparser.LexicalizedParser -retainTMPSubcategories -outputFormat "wordsAndTags,penn,typedDependencies" englishPCFG.ser.gz mumbai.txt 

#proxy
#ハマリポイント: .bash_profile が login時に読まれないので、source 。
##全般
- file: .bash_profile
/===
export http_proxy=http://wwwxxx.xxxx.xxx.xx:xxxx/
export https_proxy=http://wwwxxx.xxxx.xxx.xx:xxxx/
export ftp_proxy=http://wwwxxx.xxxx.xxx.xx:xxxx/
export no_proxy=127.0.0.1,*.local,localhost,*.xxx.xx/
===/
##aptのproxy
- file: /etc/apt/apt.conf
/===
Acquire::http::proxy "http://プロキシサーバー名:ポート番号/";
Acquire::https::proxy "https://プロキシサーバー名:ポート番号/";
Acquire::ftp::proxy "ftp://プロキシサーバー名:ポート番号/";
Acquire::socks::proxy "socks://プロキシサーバー名:ポート番号/";
===/
##ssh(git)のproxy
- file: ~/.ssh/config
/===
Host N005
 hostname 134.160.xx.xx
 User kxxxx
 ProxyCommand /bin/nc -x sock.xxx.xxx.xx:xxxx %h %p

Host github.com
 Hostname ssh.github.com
 Port 443
 ProxyCommand /bin/nc -X connect -x wwwxxx.xxxx.xx.jp:8888 %h %p

Host hokusai
 Hostname hokusai
 Proxycommand /usr/bin/nc -X connect -x wwwxxx.xxxx.xx.xx:8888 %h %p

Host Supernig
 Hostname gw.ddbj.nig.ac.jp
 Proxycommand /usr/bin/nc -X connect -x wwwxxx.xxxx.xx.xx:8888 %h %p
===/
##using port 443 for git
/===
Host github.com
 Hostname ssh.github.com
 Port 443
 Proxycommand /usr/bin/nc -X connect -x wwwxxx.xxxx.xx.xx:8888 %h %p
===/
##ブラウザの起動
設定ファイルをsourceして端末からコマンド:アイコン起動では.bash_profileが反映されないみたい



#RIKEN RICC
##キューの確認
qstat
##mpiコンパイル
mpicc -pc mpi-test.c
##mpi実行
mpirun a.out
##キューへのsubmit
qsub file
#RIKEN HOKUSAI
##インタラクティブジョブシークエンス(超並列sparc)に入る:
[]$ pjsub --interact -L rscunit=gwmpc
##以下の出力がある:
[INFO] PJM 0000 pjsub Job 35031 submitted.
[INFO] PJM 0081 .connected.
[INFO] PJM 0082 pjsub Interactive job 35031 started.
##インタラクティブ実行: ふつうにバイナリ実行
[]$ ls
##インタラクティブシークエンスから抜ける:
[]$ exit
##以下の出力がある:
logout
[INFO] PJM 0083 pjsub Interactive job 35031 completed.


#RPi
##keyboard setting
cd /etc/default/
$ sudo cp -p keyboard keyboard.orig
$ sudo vi keyboard
/===
# KEYBOARD CONFIGURATION FILE

# Consult the keyboard(5) manual page.

XKBMODEL="hhk"
XKBLAYOUT="us"
XKBVARIANT=""
XKBOPTIONS=""

BACKSPACE="guess"
$ diff keyboard.orig keyboard
6c6
< XKBLAYOUT="gb"
---
> XKBLAYOUT="us"
===/
##日本語入力
apt-get install anthy*
apt-get install uim
apt-get install ibus
reboot
##セットアップコマンド
raspi-config
##MPI
sudo apt-get install openmpi*
sudo apt-get install mpich*
##qemuでraspberrypi
qemu-system-arm -kernel /BANK/OS.img/kernel-qemu  -cpu arm1176 -m 256 -M versatilepb -no-reboot -serial stdio -append "root=/dev/sda2 panic=1 rootfstype=ext4 rw" -hda /BANK/OS.img/2013-09-25-wheezy-raspbian.img

#NCBIのNXML
##マルチバイトコードの数値文字参照について
##数値部分が10進数表記か16進数表記かわからない
##ほとんど以下の表現なので文字エンコードでなく文字コードの10進数表記か?
## &#x[][][][][];
#Pubme API
##summaryをget
- ex. http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id=22674858,22434880
##Meshを含む書誌情報をget
- ex. http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=22674858
##キーワードリストを含む書誌情報をhttpから得る(APIじゃない)
http://www.ncbi.nlm.nih.gov/pubmed/25965974?report=xml&format=text

#enju
##仮想マシン
login: vagrant
pass: vagrant
###enjuへのアクセス
VMGにて http://127.0.0.1:8080 にアクセス
##インストール
- https://github.com/next-l/enju_leaf/wiki/Install
##enjuシステムログイン
enju管理者: enjuadmin
pass: adminpassword
##bundle update
##メモリーが結構必要>2.5G
仮想マシン版からアップデートするときいくつかのパッケージ必要
##検索エンジン登録
###google
名前: google
URL: https://www.google.co.jp/
ベースURL: https://www.google.co.jp/search
HTTPメソッド: get
クエリパラメータ: q
追加のパラメータ:
注記: 
##サービススタート
###
bundle exec foreman start
 port 3000でサービス
### Ubuntu 16.04
sudo systemctl restart enju_leaf.target
##Gemfile: 設定ファイル
モジュールの読み込みを行う
たとえば、'enju_biblio'をgithubから直接読み込む設定など
/===
gem 'enju_biblio', '~> 0.2.0.beta.1', github: 'next-l/enju_biblio', branch: '1.2'
===/
##再インデクシング
RAILS_ENV=production rake sunspot:solr:reindex
##アタッチメントの登録
###GUI
1. adminでlogin; enjuadmin: adminpassword
2. 資料の受け入れ
3. 入力、添付するとインデックスも行われる
##アタッチメント(PDF)のインデクシング
###モジュールのインストール
###ドキュメント: https://github.com/next-l/enju_leaf/wiki/Solr	
1. solrをだうんろーど
2. 展開 > solr-5.5.1/
3. cp solr-5.5.1/dist/solr-cell-5.5.1.jar /home/kamano/your_enju/solr/lib/
4. cp solr-5.5.1/contrib/extraction/lib/* /home/kamano/your_enju/solr/lib/
5. solr/configsets/sunspot/conf/solrconfig.xml の編集
6. enjuをりすたーと
7. チェック: $ curl "http://localhost:8983/solr/default/update/extract?extractOnly=true&wt=ruby" -F "myfile=@example.pdf"
###indexing
7. indexing
7.1 rails c production
7.2 a=Manifestation.find(4)
7.3 a.extract_text
7.4 a.save
7.5 a.index!



#mac OSX
##Xのハマりポイント
###ssh -X
そもそもキー入力がおかしい
##ファイアウォールの切りかた:
sysctl -w net.inet.ip.fw.enable=0
##OSX nfs client
[Directory utility] -> [mount] -> (dialog左下のアイコン列;一番右をクリック) -> [詳細マウントパラメータ] に "-P nosuid" を入れる。
##imputmethodが起動しなくなった時(Yosemite)
以下のどれかのプログラムが落ちていないか確認:
/System/Library/Input Methods/JapaneseIM.app/Contents/MacOS/JapaneseIM
/System/Library/Frameworks/InputMethodKit.framework/Resources/imklaunchagent
/System/Library/Frameworks/InputMethodKit.framework/Versions/A/XPCServices/com.apple.InputMethodKit.UserDictionary.xpc/Contents/MacOS/com.apple.InputMethodKit.UserDictionary
##ソフトウエアアップデート
sudo softwareupdate -i -a
##HomeBrew
###ライブラリがみつからない的なエラー対応:
cd /usr/local/Library
git pull origin master
brew update
###エラーが出た時
$ cd `brew --prefix`
$ git fetch origin
$ git reset --hard origin/master
##トレーサー
sudo dtruss <program>
sudo dtruss -p <pid>


#PoweerShell
##カレントディレクトリの使用サイズ
Get-ChildItem  -Recurse -Force | ForEach-Object -Begin { $Len = 0 } -Process { $Len = $Len + $_.Length } -End { $Len }

#MS-excel
##get the list of sheets
blog.asens.jp/archives/1194

